class Quicksort<T> : IListSorter<T>
// Defines a quicksort implementation for IListSorter<T>.
// Elements are sorted in ascending order using quicksort based on input from an IComparer<T> which is obtained via a constructor parameter.
{

    +CreateQuicksort(in ItemComparer : IComparer<T>) : Quicksort<T> { query }
    // Creates a new instance of a quicksort implementation for IListSorter<T> based on the given item comparer.

    property ItemComparer
    {

        +get() : IComparer<T> { query }
        // Gets the item comparer that is used to order items.

        -set(in value : IComparer<T>)
        // Sets the item comparer that is used to order items.

    }

    +Sort(in Items : IList<T>) : IList<T>
    // Sorts the items in the given list.
    // Whether the results are stored in-place or a new list is created is an implementation detail.
    // Pre:
    // 'Items' must be a mutable list of items of type 'T'.
    // Post:
    // Returns a list that contains all elements of 'Items' in sorted order. 'Items' may or may not become sorted, but will contain the same elements as before.

    -Swap(in Items : IList<T>, in First : integer, in Second : integer)
    // Swaps two items' positions in the list.

    -Quicksort(in Items : IList<T>, in Start : integer, in End : integer)
    // Sorts (a portion of) the given list list in-place using the quicksort algorithm.

    -Partition(in Items : IList<T>, in Start : integer, in End : integer) : integer
    // 'Partitions' the given list.
    // Basically, a pivot item is selected, and all items that have a search key less than the pivot will be moved to the start of the list.
    // The pivot item will be the next item in the list, followed immediately by all items that have a search key greater than or equal to the pivot.
    // The returns value consists of the index of the pivot in the modified list.
    // This method is used by the quicksort sorting method.
    // Post:
    // Returns the index of the spot in the list where the pivot has been placed.

}