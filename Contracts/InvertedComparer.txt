class InvertedComparer<T> : IComparer<T>
// A comparer inverts the result of another comparer.
{

    +CreateInvertedComparer(in Comparer : IComparer<T>) : InvertedComparer<T> { query }
    // Creates a new inverted comparer that uses the given comparer.

    property Comparer
    {

        +get() : IComparer<T> { query }
        // Gets the internal comparer this comparer uses.

        -set(in value : IComparer<T>)
        // Sets the internal comparer this comparer uses.

    }

    +Compare(in Item : T, in Other : T) : integer { query }
    // Compares two items and returns an integer describing their relationship to each other.
    // Pre:
    // 'Item' is the left operand of the comparison, 'Other' is the right operand.
    // Post:
    // Returns 0 if 'Item' and 'Other' are equal, -1 if 'Item' is less than 'Other' and 1 if 'Item' is greater than 'Other'.

}