class Theater
// Represents a movie theater.
{

    +CreateTheater(in Name : string) : Theater { query }
    // Creates a new movie theater instance.

    property Auditoria
    {

        +get() : SwapList<Auditorium> { query }
        // Gets a read-only list of all auditoria in this movie theater.

    }

    property Timeslots
    {

        +get() : SwapList<Time> { query }
        // Gets the list of all available timeslots for this movie theater.

    }

    property Movies
    {

        +get() : SortedSwapList<Movie> { query }
        // Gets the list of all movies known to the movie theater.

    }

    property Showtimes
    {

        +get() : ISortableTable<integer, Showtime> { query }
        // Gets a table containing scheduled showtimes.
        // The showtimes are contained in a table that uses the showtimes' IDs as search keys.

    }

    property RegisteredCustomers
    {

        +get() : SwapList<User> { query }
        // Gets a read-only view of all customers registered with this theater.

    }

    property Name
    {

        +get() : string { query }
        // Gets the movie theater's name.

        -set(in value : string)
        // Sets the movie theater's name.

    }

    property Reservations
    {

        +get() : ReservationManager { query }
        // Gets the reservation manager instance.

        -set(in value : ReservationManager)
        // Sets the reservation manager instance.

    }

    +FindMovie(in Title : string) : Movie { query }
    // Tries to find a movie based on its complete title.
    // Post:
    // Searches through all movies until it finds one that corresponds to the given title.
    // The first movie that matches this title will be returned.
    // If no movie matches the given title, 'None' is returned.

    +IsTimeslot(in Value : Time) : boolean { query }
    // Gets a boolean value that indicates if the provided time corresponds to a timeslot.

    +ShowtimePlanned(in Location : Auditorium, in StartTime : DateTime) : boolean { query }
    // Gets a boolean value that indicates whether a showtime has been planned or not at the specified time in the specified auditorium.

    +BuildAuditorium(in NumberOfSeats : integer) : Auditorium
    // Builds and returns a new auditorium with the specified number of seats.
    // Pre:
    // 'NumberOfSeats' must be a nonzero positive integer.
    // Post:
    // This method creates a new Auditorium object, adds it to the current movie theater, and returns it.

    +ScheduleShowtime(in Location : Auditorium, in MoviePlaying : Movie, in StartTime : DateTime) : Showtime
    // Schedules a new showtime at this theater, based on the provided arguments.
    // Pre:
    // The auditorium must not be booked for a showtime yet at that specific time, the movie must be a known movie to this theater, and the start time must correspond to a future, valid timeslot.
    // Post:
    // A new showtime is created and assigned its own unique identifier, it is subsequently added to the theater's list of showtimes and then returned.
    // If any of the provided arguments are invalid, 'None' is returned, and no showtime will be scheduled.

    +RegisterCustomer(in FirstName : string, in LastName : string, in EmailAddress : string) : User
    // Registers a new customer and returns a User instance that describes them.
    // Pre:
    // FirstName and LastName should be the user's first and last name, respectively, and EmailAddress should be the user's e-mail address.
    // Post:
    // Creates a new User instance, assigns it a unique id and the given arguments, adds it to the list of registered users, and returns it.

    +RegisterMovie(in Title : string, in Rating : float) : Movie
    // Creates a new movie from the given arguments and adds it to the list of playing movies.
    // Post:
    // A new movie is created based on a unique ID, 'Title' and 'Rating', and is then added to the 'Movies' list.
    // The created movie is subsequently returned.

}