class Hashtable<TKey, TValue> : ITable<TKey, TValue>
// Represents a hash table that uses separate chaining.
{

    +CreateHashtable(in KeyMap : IMap<TValue, TKey>, in BucketFactory : IFactory<ITable<TKey, TValue>, IMap<TValue, TKey>>) : Hashtable<TKey, TValue> { query }
    // Creates a new hash table, from the provided key map and the bucket table factory.
    // Remarks:
    // 'BucketFactory' of type 'IFactory<ITable<TKey, TValue>, IMap<TValue, TKey>>' is a factory that creates instances of 'ITable<TKey, TValue>' when provided an argument of type 'IMap<TValue, TKey>'.
    // Essentially, it creates new buckets, which are themselves tables, from a key-value map.

    indexer
    {

        +get(in Key : TKey) : TValue { query }
        // Retrieves the item in the table with the specified key.
        // Pre:
        // For this method to return an item in the table, rather than null, the key must be in the table, i.e.
        // ContainsKey(Key) must return true.
        // Post:
        // The return value of this method will be the item that corresponds with the key, or None, if it is not found.
        // It is recommended to check if the table contains the key by using ContainsKey.

    }

    property KeyMap
    {

        +get() : IMap<TValue, TKey> { query }
        // Gets the record-to-key mapping function used by this hash table.

    }

    property BucketFactory
    {

        +get() : IFactory<ITable<TKey, TValue>, IMap<TValue, TKey>> { query }
        // Gets the factory that is used to create new buckets for this hash table.

    }

    +ContainsKey(in Key : TKey) : boolean { query }
    // Gets a boolean value that indicates if the hash table contains the given key.

    +Insert(in Item : TValue) : boolean
    // Inserts an item in the hash table.

    +Remove(in Key : TKey) : boolean
    // Removes a key from the table.
    // Post:
    // This method returns true if the key is in the table, false if not.

    +ToList() : IReadOnlyList<TValue> { query }
    // Gets the table's items as a read-only list.
    // Post:
    // This method returns a read-only list that describes the items in this table.
    // Modifications to this list are not allowed - it is read-only.
    // Furthermore, this list may be an alias to an internal list containing the table's items, or a copy.
    // This list need not be sorted, but must contain every item in the table.

}