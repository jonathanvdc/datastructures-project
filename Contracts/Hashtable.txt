class Hashtable<TKey, TValue> : ITable<TKey, TValue>
// Represents a hash table that uses separate chaining.
{

    +CreateHashtable(in KeyMap : IMap<TValue, TKey>, in BucketFactory : IFactory<ITable<TKey, TValue>, IMap<TValue, TKey>>) : Hashtable<TKey, TValue> { query }
    // Creates a new hash table, from the provided key map and the bucket table factory.
    // Remarks:
    // 'BucketFactory' of type 'IFactory<ITable<TKey, TValue>, IMap<TValue, TKey>>' is a factory that creates instances of 'ITable<TKey, TValue>' when provided an argument of type 'IMap<TValue, TKey>'.
    // Essentially, it creates new buckets, which are themselves tables, from a key-value map.

    property Count
    {

        +get() : integer { query }
        // Gets the number of elements in the collection.

    }

    property IsEmpty
    {

        +get() : boolean { query }

    }

    property BucketCapacity
    {

        -get() : integer { query }
        // Gets the number of buckets in the table.

    }

    property BucketLoadFactor
    {

        -get() : float { query }
        // Gets the bucket load factor.

    }

    indexer
    {

        +get(in Key : TKey) : TValue { query }
        // Retrieves the item in the table with the specified key.
        // Pre:
        // For this method to return an item in the table, rather than null, the key must be in the table, i.e.
        // ContainsKey(Key) must return true.
        // Post:
        // The return value of this method will be the item that corresponds with the key, or None, if it is not found.
        // It is recommended to check if the table contains the key by using ContainsKey.

    }

    property KeyMap
    {

        +get() : IMap<TValue, TKey> { query }
        // Gets the record-to-key mapping function used by this hash table.

        -set(in value : IMap<TValue, TKey>)
        // Sets the record-to-key mapping function used by this hash table.

    }

    property BucketFactory
    {

        +get() : IFactory<ITable<TKey, TValue>, IMap<TValue, TKey>> { query }
        // Gets the factory that is used to create new buckets for this hash table.

        -set(in value : IFactory<ITable<TKey, TValue>, IMap<TValue, TKey>>)
        // Sets the factory that is used to create new buckets for this hash table.

    }

    -GetNextPrime() : integer { query }
    // Gets the next prime in the prime list.
    // If this prime is not available, -1 is returned.

    -ResizeTable()
    // Tries to resize the table to the next prime and re-hashes every element.

    -GetBucket(in HashCode : integer) : ITable<TKey, TValue> { query }
    // Gets the bucket for items with the given hash code.

    -DeleteBucket(in HashCode : integer)
    // Deletes the bucket with the provided hash code.

    -GetNewBucket(in HashCode : integer) : ITable<TKey, TValue>
    // Gets the bucket for items with the given hash code or creates a new one, if necessary.

    -FindInBucket(in Bucket : ITable<TKey, TValue>, in Key : TKey) : TValue { query }
    // Finds an item in the given bucket with the given key.

    -BucketContainsKey(in Bucket : ITable<TKey, TValue>, in Key : TKey) : boolean { query }
    // Finds out if a bucket contains the given key.

    +ContainsKey(in Key : TKey) : boolean { query }
    // Gets a boolean value that indicates if the hash table contains the given key.

    +Insert(in Item : TValue) : boolean
    // Inserts an item in the hash table.
    // Post:
    // Returns true if item is successfully inserted, false if the table already contains an item with the same search key.

    +Remove(in Key : TKey) : boolean
    // Removes a key from the table.
    // Post:
    // This method returns true if the key is in the table, false if not.

    +ToList() : IReadOnlyList<TValue> { query }
    // Gets the table's items as a read-only list.
    // The elements in this list are in the same order as those in the table's iterator, obtained through '__iter__' (the get iterator method).
    // Any statement that applies to this method therefore also applies to the '__iter__' (get iterator) method, and vice-versa.
    // Post:
    // This method returns a read-only list that describes the items in this table.
    // Modifications to this list are not allowed - it is read-only.
    // Furthermore, this list may be an alias to an internal list containing the table's items, or a copy.
    // This list need not be sorted, but must contain every item in the table.

}