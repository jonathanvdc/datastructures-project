class SortedList<T> : ISortedList<T>
// A straightforward implementation of a sorted list that uses a random-access list as backing storage and utilizes a mapping function to compare items.
// Remarks:
// This 'ISortedList<T>' implementation can be used to implement selection sort when used in conjunction with a 'SortedListSort<T>' instance.
{

    +CreateSortedList(in KeyMap : IMap<T, object>, in List : IList<T>) : SortedList<T> { query }
    // Creates a new sorted list from the given mapping function and list.

    property IsEmpty
    {

        +get() : boolean { query }
        // Gets a boolean value that indicates if the sorted list is empty.
        // Post:
        // Return true if empty, false if not.

    }

    property Count
    {

        +get() : integer { query }
        // Gets the number of elements in the collection.

    }

    property KeyMap
    {

        +get() : IMap<T, object> { query }
        // Gets a record-to-key map that maps records to sortable keys.

        -set(in value : IMap<T, object>)

    }

    +Add(in Item : T)
    // Adds an item to the collection.

    +Remove(in Item : T) : boolean
    // Removes an item from the list.
    // Pre:
    // For Item to be successfully removed from the sorted list, it must have been in the list before removal.
    // Post:
    // Returns true if the sorted list contained the given item, false if not.
    // If this returns true, the item has been removed from the sorted list.

    +Contains(in Item : T) : boolean { query }
    // Finds out if the sorted list contains the given item.

    +ToList() : IReadOnlyList<T> { query }
    // Returns a read-only list that represents this list's contents, for easy enumeration.

}