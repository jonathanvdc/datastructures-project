class Queue<T> : IReadOnlyCollection<T>
// Represents a generic queue.
// Remarks:
// T is the type of item in the queue.
{

    +CreateQueue() : Queue<T> { query }
    // Creates a new queue instance.

    +CreateQueue(in dataContainer : IList<T>) : Queue<T> { query }
    // Creates a new queue instance that uses the specified list to store its data.

    property Count
    {

        +get() : integer { query }
        // Gets the number of items on the queue.

    }

    property IsEmpty
    {

        +get() : boolean { query }
        // Gets a boolean value that indicates whether the queue is empty or not.

    }

    property Front
    {

        +get() : T { query }
        // Peeks at the item at the top of the queue, without removing it.
        // Pre:
        // The queue may not be empty.
        // Post:
        // If the queue was empty, None will be returned.

    }

    +Enqueue(in Item : T)
    // Adds an item to the queue.

    +Dequeue() : T
    // Dequeues an item and returns it.
    // Pre:
    // The queue may not be empty.
    // Post:
    // If the queue was empty, the queue's state will not change, and None will be returned.

}