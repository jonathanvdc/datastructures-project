class Showtime : IRecord<integer>
// Describes a showtime at the movie theater.
{

    +CreateShowtime(in Id : integer, in Location : Auditorium, in MoviePlaying : Movie, in StartTime : DateTime) : Showtime { query }
    // Creates a new instance of a showtime.
    // Pre:
    // Id must be a valid and unique identifier, the location must be an existing at the theater, the movie must be known to the theater and the start time must correspond to one of the theater's time slots.

    property Date
    {

        +get() : Date { query }
        // Gets the date assigned to the showtime.

    }

    property Timeslot
    {

        +get() : Time { query }
        // Gets the movie's starting time.

    }

    property NumberOfFreeSeats
    {

        +get() : integer { query }
        // Gets the number of remaining free seats for this showtime.

    }

    property AuditoriumIndex
    {

        +get() : integer { query }
        // Gets the index of the auditorium where the showtime will take place.

    }

    property MovieId
    {

        +get() : integer { query }
        // Gets the identifier of the movie that's playing at the showtime instance.

    }

    property Key
    {

        +get() : integer { query }
        // Gets the record's search key.

    }

    property Id
    {

        +get() : integer { query }
        // Gets the showtime's unique identifier.

    }

    property Location
    {

        +get() : Auditorium { query }
        // Gets the auditorium where the showtime will take place.

    }

    property MoviePlaying
    {

        +get() : Movie { query }
        // Gets the movie that will play at the showtime.

    }

    property StartTime
    {

        +get() : DateTime { query }
        // Gets the date and time for which this showtime is scheduled.

    }

    +MakeReservation(in Id : integer, in Request : ReservationRequest) : Reservation
    // Reserves a ticket for this showtime.
    // Pre:
    // Id should be a unique identifier, and the number of seats in request should be no more than the amount of free seats.
    // The reservation request must always be a reservation for this showtime.
    // Post:
    // If the reservation request demanded more seats than available, None will be returned, and no seats will be reserved.
    // The reservation is in effect considered to be canceled.

    +RedeemTicket(in Theater : Theater, in Customer : User)
    // Have one person redeem their ticket and enter the showtime.
    // Note that a user who reserved more than one ticket must enter the showtime multiple times, once per ticket.
    // Pre:
    // The customer must be a user who has an unredeemed ticket for this showtime.
    // The theater must be the theater containing this showtime.
    // Post:
    // If the customer does not have an unredeemed ticket for this showtime, this method does nothing.
    // If, on the other hand, the user does, their ticket is redeemed, and their absence will no longer delay the showtime.
    // If the last ticket was redeemed, the showtime begins, and is be removed from the theater's showtime list.

}