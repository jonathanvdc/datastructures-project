class ArrayList<T> : IList<T>
// An array-based implementation of a list.
{

    +CreateArrayList() : ArrayList<T> { query }
    // Creates a new instance of a list.

    +CreateArrayList(in data : T[]) : ArrayList<T> { query }
    // Creates a new instance of a list backed by the provided array.

    property Count
    {

        +get() : integer { query }
        // Gets the number of elements in the collection.

    }

    indexer
    {

        +get(in Index : integer) : T { query }
        // Gets the item in the list at the specified position.

        +set(in Index : integer, in value : T)
        // Sets the item in the list at the specified position.

    }

    +Add(in Item : T)
    // Adds an item to the end of the list.

    +Insert(in Index : integer, in Item : T) : boolean
    // Inserts an item in the list at the specified position.
    // Pre:
    // Index must be a valid index in the list: it must be non-negative and less than the list's length, as exposed by the Count property.
    // Post:
    // If the provided index was an invalid index in the list, the list's state is not changed, and false is returned.
    // Otherwise, all items from the given index upward are shifted once to the right, and the provided item is inserted at the specified index in the list.

    +RemoveAt(in Index : integer) : boolean
    // Removes the element at the specified index from the list.
    // Pre:
    // Index must be a valid index in the list: it must be non-negative and less than the list's length, as exposed by the Count property.
    // Post:
    // If the provided index was an invalid index in the list, the list's state is not changed, and false is returned.
    // Otherwise, the item at the specified index is removed and the index of all items whose index is greater than the provided index, will be decremented by one.

    +CopyTo(in Target : T[])
    // Copies the array list's contents to the provided target array.
    // Post:
    // Copies all elements from the list, starting at index 0 up to and including the last index of this list or the target array, whichever comes first.

    +ToArray() : T[] { query }
    // Gets an array with length the number of elements in this list, and the same contents as this list.
    // Remarks:
    // The resulting array is not the backing array for this list, but rather an array whereto the elements of this list are copied.
    // This method was added to make copying an 'ArrayList<T>' easier.
    // Creating a new 'ArrayList<T>' from an array is also faster than creating an empty list and then adding every element from the original list, as the internal array will not need expanding.

}