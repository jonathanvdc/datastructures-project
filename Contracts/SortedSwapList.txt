class SortedSwapList<T> : ISortedList<T>
// A sorted list whose backing list can be swapped.
// It is the sorted equivalent of 'SwapList<T>'
{

    +CreateSortedSwapList(in backingList : ISortedList<T>) : SortedSwapList<T> { query }
    // Creates a new sorted swap list with the specified backing list.

    property IsEmpty
    {

        +get() : boolean { query }
        // Gets a boolean value that indicates if the sorted list is empty.
        // Post:
        // Return true if empty, false if not.

    }

    property Count
    {

        +get() : integer { query }
        // Gets the number of elements in the collection.

    }

    +Swap(in Container : ISortedList<T>)
    // Swaps the sorted swap list's backing container with another backing list.
    // Pre:
    // 'Container' should be empty.
    // If not, it will be cleared.
    // Post:
    // The container is cleared.
    // Then, all items in the current backing list are copied to 'Container'.
    // After that, the backing list of this sorted swap list is set to 'Container'.

    +Add(in Item : T)
    // Adds an item to the collection.
    // Remarks:
    // This method allows items to be added to a collection without knowledge of how the collection organizes itself.
    // It does not specify where the item will be inserted, only that it will be inserted.

    +Remove(in Item : T)

    +Contains(in Item : T) : boolean { query }
    // Finds out if the sorted list contains the given item.

    +ToList() : IReadOnlyList<T> { query }
    // Returns a read-only list that represents this list's contents, for easy enumeration.

}