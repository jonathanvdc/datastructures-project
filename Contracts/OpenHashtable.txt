class OpenHashtable<TKey, TValue> : ITable<TKey, TValue>
// Represents a hash table that uses open addressing.
{

    +CreateOpenHashtable(in KeyMap : IMap<TValue, TKey>, in ProbeSequenceMap : IMap<integer, iterable<integer>>) : OpenHashtable<TKey, TValue> { query }
    // Creates a new hash table, with the provided key map and probe sequence map.

    property Capacity
    {

        -get() : integer { query }
        // Gets the table's capacity.

    }

    property IsEmpty
    {

        +get() : boolean { query }
        // Gets a boolean value that indicates whether the table is empty or not.

    }

    property LoadFactor
    {

        -get() : float { query }
        // Gets the table's load factor.

    }

    indexer
    {

        +get(in Key : TKey) : TValue { query }
        // Retrieves the item in the table with the specified key.
        // Pre:
        // For this method to return an item in the table, rather than null, the key must be in the table, i.e.
        // ContainsKey(Key) must return true.
        // Post:
        // The return value of this method will be the item that corresponds with the key, or None, if it is not found.
        // It is recommended to check if the table contains the key by using ContainsKey.

    }

    property KeyMap
    {

        +get() : IMap<TValue, TKey> { query }
        // Gets the record-to-key mapping function used by this hash table.

        -set(in value : IMap<TValue, TKey>)
        // Sets the record-to-key mapping function used by this hash table.

    }

    property ProbeSequenceMap
    {

        +get() : IMap<integer, iterable<integer>> { query }
        // Gets the open addressed hash table's hash key to probe sequence mapping function.

        -set(in value : IMap<integer, iterable<integer>>)
        // Sets the open addressed hash table's hash key to probe sequence mapping function.

    }

    property Count
    {

        +get() : integer { query }
        // Gets the number of items in the table.

        -set(in value : integer)
        // Sets the number of items in the table.

    }

    -GetNextPrime() : integer { query }
    // Gets the next prime in the prime list.
    // If this prime is not available, -1 is returned.

    -ResizeTable()
    // Tries to resize the table to the next prime and re-hashes every element.

    -FindOpenItem(in Key : TKey) : OpenHashtableItem<TValue>

    -IsOpen(in Index : integer) : boolean
    // Finds out if the position at the given index is open.

    +Insert(in Item : TValue) : boolean
    // Inserts an item into the table.
    // Post:
    // Returns true if item is successfully inserted, false if the table already contains an item with the same search key.

    +ContainsKey(in Key : TKey) : boolean
    // Finds out if the table contains the specified key.

    +Remove(in Key : TKey) : boolean
    // Removes a key from the table.
    // Post:
    // This method returns true if the key is in the table, false if not.

    +ToList() : IReadOnlyList<TValue> { query }
    // Gets the table's items as a read-only list.
    // The elements in this list are in the same order as those in the table's iterator, obtained through '__iter__' (the get iterator method).
    // Any statement that applies to this method therefore also applies to the '__iter__' (get iterator) method, and vice-versa.
    // Post:
    // This method returns a read-only list that describes the items in this table.
    // Modifications to this list are not allowed - it is read-only.
    // Furthermore, this list may be an alias to an internal list containing the table's items, or a copy.
    // This list need not be sorted, but must contain every item in the table.

}