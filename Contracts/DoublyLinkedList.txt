class DoublyLinkedList<T> : IList<T>
// A doubly linked list implementation of a list.
{

    +CreateDoublyLinkedList() : DoublyLinkedList<T> { query }
    // Creates a new doubly linked list.

    property Tail
    {

        -get() : DoubleNode<T> { query }
        // Gets the linked list's tail node.

    }

    property Count
    {

        +get() : integer { query }
        // Gets the number of elements in the collection.

    }

    indexer
    {

        +get(in Index : integer) : T { query }
        // Gets the item in the linked list at the given index.
        // Pre:
        // The index must be valid index within this linked list: it must be non-negative and less than the list's length, exposed by the Count property.
        // Post:
        // If the index is a valid index in the linked list, the operation on said index is performed.
        // Otherwise, an exception is thrown.

        +set(in Index : integer, in value : T)
        // Sets the item in the linked list at the given index.
        // Pre:
        // The index must be valid index within this linked list: it must be non-negative and less than the list's length, exposed by the Count property.
        // Post:
        // If the index is a valid index in the linked list, the operation on said index is performed.
        // Otherwise, an exception is thrown.

    }

    +ToArray() : T[] { query }
    // Gets an array representation of this linked list.
    // Remarks:
    // This method was added to the 'DoublyLinkedList<T>' class to allow quick and easy O(n) iteration over its elements.
    // It goes without saying that this method should and can only be safely called if the 'DoublyLinkedList<T>' has been procured through a method that specifies its return value to be of said type.

    +NodeAt(in Index : integer) : DoubleNode<T> { query }
    // Gets the list node at the specified index.
    // Pre:
    // The index must be valid index within this linked list: it must be non-negative and less than the list's length, exposed by the Count property.
    // Post:
    // If the index is a valid index in the linked list, the node at said index is returned.
    // Otherwise, None is returned.

    +ItemAt(in Index : integer) : T { query }
    // Gets the item in the linked list at the given index.
    // Pre:
    // The index must be valid index within this linked list: it must be non-negative and less than the list's length, exposed by the Count property.
    // Post:
    // If the index is a valid index in the linked list, the item at said index is returned.
    // Otherwise, an exception is thrown.

    +Add(in Item : T)
    // Adds an item to the end of the linked list.
    // Pre:
    // Item is the item that will be inserted at the end of the list.
    // Post:
    // If the linked list has a head node, the item is inserted after the linked list's tail node.
    // Otherwise, a new head node containing Item is created, which coincidentally becomes this linked list's head.

    +RemoveAt(in Index : integer) : boolean
    // Removes the item in the linked list at the specified index.
    // Pre:
    // Index must be a valid index in the list: it must be non-negative and less than the list's length, as exposed by the Count property.
    // Post:
    // If the provided index was an invalid index in the list, the list's state is not changed, and false is returned.
    // Otherwise, the item at the specified index is removed and the index of all items whose index is greater than the provided index, will be decremented by one.

    +Insert(in Index : integer, in Item : T) : boolean
    // Inserts an item in the list at the specified position.
    // Pre:
    // Index must be a valid index in the list: it must be non-negative and less than the list's length, as exposed by the Count property.
    // Post:
    // If the provided index was an invalid index in the list, the list's state is not changed, and false is returned.
    // Otherwise, all items from the given index upward are shifted once to the right, and the provided item is inserted at the specified index in the list.

}