class SwapTable<TKey, TValue> : ITable<TKey, TValue>
// A wrapper table that allows for the underlying table to be 'swapped'.
{

    +CreateSwapTable(in table : ITable<TKey, TValue>) : SwapTable<TKey, TValue> { query }
    // Creates a new instance of a swap table.

    indexer
    {

        +get(in Key : TKey) : TValue { query }
        // Retrieves the item in the table with the specified key.
        // Pre:
        // For this method to return an item in the table, rather than null, the key must be in the table, i.e.
        // ContainsKey(Key) must return true.
        // Post:
        // The return value of this method will be the item that corresponds with the key, or None, if it is not found.
        // It is recommended to check if the table contains the key by using ContainsKey.

    }

    property Count
    {

        +get() : integer { query }
        // Gets the number of elements in the collection.

    }

    +Swap(in Table : ITable<TKey, TValue>)
    // Changes the underlying table implementation to the provided table.
    // Post:
    // The underlying implementation of this table will be changed to 'Table', which will be populated with the items from the previous underlying table, in addition to the elements that were already in 'Table'.

    +Insert(in Value : TValue) : boolean
    // Inserts an item into the table.
    // Post:
    // Returns true if item is successfully inserted, false if the table already contains an item with the same search key.

    +ContainsKey(in Key : TKey) : boolean { query }
    // Finds out if the table contains the specified key.
    // Remarks:
    // The original table ADT does not specify this method.
    // It is added, however, to compensate for the lack of the 'success' out parameter when using the retrieve operation.

    +Remove(in Key : TKey) : boolean
    // Removes a key from the table.
    // Post:
    // This method returns true if the key is in the table, false if not.

    +ToList() : IReadOnlyList<TValue> { query }
    // Gets the table's items as a read-only list.
    // Post:
    // This method returns a read-only list that describes the items in this table.
    // Modifications to this list are not allowed - it is read-only.
    // Furthermore, this list may be an alias to an internal list containing the table's items, or a copy.
    // This list need not be sorted, but must contain every item in the table.

}